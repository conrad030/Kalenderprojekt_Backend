openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Kalenderprojekt/Kalender-Backup/1.0.0
info:
  description: Kalender-Backup API
  version: "1.0.0"
  title: Kalender-Backup API
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
paths:
  /users/signup:
    post:
      tags:
        - User
      security: []
      description: user signup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSignupBody"
      responses:
        "201":
          description: user successfully created
        "400":
          description: dublicate name or email
        "404":
          description: bad input
  /users/login:
    post:
      tags:
        - User
      security:
        - BasicAuth: []
      description: User login
      responses:
        "200":
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSchema"
        "404":
          description: Bad input
  /users/group/{id}:
    post:
      tags:
        - User
      description: Get all users of a group or a team of a group
      parameters:
        - in: path
          name: id
          description: Pass specific ID of a group
          required: true
          schema:
            type: integer
      requestBody:
        description: Pass specific ID of a team
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamIdSchema"
      responses:
        "200":
          description: All users of a group or a team of a group
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserSchema"
        "404":
          description: Not found
  /users/{id}:
    delete:
      tags:
        - User
      description: Delete a user
      parameters:
        - in: path
          name: id
          description: Pass specific ID of a user
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Delete user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSchema"
        "404":
          description: Not found
        "403":
          description: Not authorized
  /users/groups:
    get:
      tags:
        - User
      description: Get all groups in where the logged in user is
      responses:
        "200":
          description: All groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GroupSchema"
        "401":
          description: Unauthenticated
  /groups/create:
    post:
      tags:
        - Group
      description: Create new group
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGroupSchema"
      responses:
        "201":
          description: Group successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupSchema"
        "400":
          description: Bad input
        "401":
          description: Missing authentication
  /groups:
    get:
      tags:
        - Group
      description: Get all groups
      responses:
        "200":
          description: All groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GroupSchema"
        "401":
          description: Missing authentication
        "403":
          description: Not authorized
  /groups/{id}:
    get:
      tags:
        - Group
      description: Get specific group
      parameters:
        - in: path
          name: id
          description: Pass specific ID of group
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Found matching group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupSchema"
        "401":
          description: Missing authentication
        "403":
          description: Not authorized
        "404":
          description: Not found
    put:
      tags:
        - Group
      description: Changes group data
      parameters:
        - in: path
          name: id
          description: Pass specific ID of group
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGroupSchema"
      responses:
        "200":
          description: Successfully changed group data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupSchema"
        "401":
          description: Missing authentication
        "403":
          description: Not authorized
        "404":
          description: Not found
    delete:
      tags:
        - Group
      description: Deletes group
      parameters:
        - in: path
          name: id
          description: Pass specific ID of group
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successfully deleted group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupSchema"
        "401":
          description: Missing authentication
        "403":
          description: Not authorized
        "404":
          description: Not found
  /groups/teams/{id}:
    get:
      tags:
        - Group
      description: Get all teams in group
      parameters:
        - in: path
          name: id
          description: Pass specific ID of group
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Got all teams for group
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TeamSchema"
        "401":
          description: Missing authentication
        "403":
          description: Forbidden
        "404":
          description: Not found
  /groups/teams/members/{id}:
    post:
      tags:
        - Group
      description: Get all members of team
      parameters:
        - in: path
          name: id
          description: Pass specific ID of team
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupIdSchema"
      responses:
        "200":
          description: Found matching group
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserSchema"
        "401":
          description: Missing authentication
        "403":
          description: Not authorized
        "404":
          description: Not found
  /groups/invitation/{code}:
    post:
      tags:
        - Group
      description: To acces a group
      parameters:
        - in: path
          name: code
          description: Pass group invitation code
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully joined group
        "400":
          description: User is already member
        "401":
          description: Missing authentication
        "404":
          description: Not found
  /appointments:
    get:
      tags:
        - Appointment
      description: Get all appointments for the logged in user
      responses:
        "200":
          description: All appointments for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AppointmentSchema"
        "401":
          description: Missing authentication
    post:
      tags:
        - Appointment
      description: Creates new appointment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAppointmentSchema"
      responses:
        "201":
          description: Successfully created appointment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppointmentSchema"
        "400":
          description: Bad input
        "401":
          description: Missing authentication
  /appointments/groups/{id}:
    get:
      tags:
        - Appointment
      description: Get all appointments for group
      parameters:
        - in: path
          name: id
          description: Pass specific ID of group
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: All appointments for group
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AppointmentSchema"
        "401":
          description: Missing authentication
        "404":
          description: Group ID not found
  /appointments/{id}:
    get:
      tags:
        - Appointment
      description: Get specific appointment
      parameters:
        - in: path
          name: id
          description: Pass specific ID of appointment
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Specific appointment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppointmentSchema"
        "401":
          description: Missing authentication
        "403":
          description: Not authorized
        "404":
          description: Appointment not found
    put:
      tags:
        - Appointment
      description: Edit appointment
      parameters:
        - in: path
          name: id
          description: Pass specific ID of appointment
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditAppointmentSchema"
      responses:
        "200":
          description: Updated appointment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppointmentSchema"
        "401":
          description: Missing authentication
        "403":
          description: Not authorized
        "404":
          description: Appointment not found
    delete:
      tags:
        - Appointment
      description: Delete appointment
      parameters:
        - in: path
          name: id
          description: Pass specific ID of appointment
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Deleted appointment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppointmentSchema"
        "401":
          description: Missing authentication
        "403":
          description: Not authorized
        "404":
          description: Appointment not found
  /appointments/createException:
    post:
      description: Create appointment exception
      tags:
        - Appointment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAppointmentExceptionSchema"
      responses:
        "201":
          description: Created exception for appointment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppointmentSchema"
        "401":
          description: Missing authentication
        "403":
          description: Not authorized
        "404":
          description: Appointment not found
  /appointments/member:
    post:
      parameters:
        - in: query
          name: appointmentId
          description: id of appointment
          required: true
          schema:
            type: integer
        - in: query
          name: userId
          description: id of user
          required: true
          schema:
            type: integer
      tags:
        - Appointment
      description: add user to appointment
      responses:
        "201":
          description: added user to appointment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppointmentSchema"
        "400":
          description: user already in appointment
        "401":
          description: not authorized
        "403":
          description: missing rights
    delete:
      tags:
        - Appointment
      description: Deletes appointment member
      parameters:
        - in: query
          name: appointmentId
          description: id of appointment
          required: true
          schema:
            type: integer
        - in: query
          name: userId
          description: id of user
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successfully deleted team member
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppointmentSchema"
        "401":
          description: Missing authentication
        "403":
          description: Not authorized
        "404":
          description: Not found
  /member/acceptInvitation/{id}:
    post:
      parameters:
        - in: path
          name: id
          description: Pass specific ID of appointment
          required: true
          schema:
            type: integer
      tags:
        - Appointment
      description: Accept invitation to appointment
      responses:
        "200":
          description: Invitation accepted
        "400":
          description: user already accepted invitation
        "401":
          description: not authorized
        "404":
          description: Appointment not found
  /uploadFile/{id}:
    post:
      tags:
        - Appointment
      description: Attach a file to an appointment
      parameters:
        - in: path
          name: id
          description: Pass specific ID of appointment
          required: true
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: File attached
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppointmentSchema"
        "403":
          description: Wrong file format
        "401":
          description: not authorized
        "404":
          description: Appointment not found
  /teams:
    # GET ALL TEAMS
    get:
      tags:
        - Team
      description: get all teams for group
      responses:
        "200":
          description: got all teams for group
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TeamSchema"
        "400":
          description: wrong or missing group id
        "401":
          description: not authorized

    # CREATE TEAM
    post:
      tags:
        - Team
      description: create team in group
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamSchema"
      responses:
        "201":
          description: created team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamSchema"
        "400":
          description: team name already exists
        "401":
          description: not authorized
        "403":
          description: missing rights
  /teams/{id}:
    # GET ONE TEAM
    get:
      parameters:
        - in: path
          name: id
          description: Pass specific ID of team
          required: true
          schema:
            type: integer
      tags:
        - Team
      description: get one team
      responses:
        "200":
          description: found team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamSchema"
        "400":
          description: wrong or missing groupId
        "401":
          description: not authorized
    # UPDATE TEAM
    put:
      parameters:
        - in: path
          name: id
          description: Pass specific ID of team
          required: true
          schema:
            type: integer
      tags:
        - Team
      description: update team
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamSchema"
      responses:
        "200":
          description: updated team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamSchema"
        "400":
          description: team name already exists
        "401":
          description: not authorized
        "403":
          description: missing rights
    # DELETE TEAM
    delete:
      parameters:
        - in: path
          name: id
          description: Pass specific ID of team
          required: true
          schema:
            type: integer
      tags:
        - Team
      description: delete team
      responses:
        "200":
          description: deleted team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamSchema"
        "401":
          description: not authorized
        "403":
          description: missing rights
        "404":
          description: not found
  /team/member:
    post:
      parameters:
        - in: query
          name: teamId
          description: id of team
          required: true
          schema:
            type: integer
        - in: query
          name: userId
          description: id of user
          required: true
          schema:
            type: integer
      tags:
        - Team
      description: add user to team
      responses:
        "201":
          description: added user to team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserTeamSchema"
        "400":
          description: user already in team
        "401":
          description: not authorized
        "403":
          description: missing rights
    delete:
      tags:
        - Team
      description: Deletes team member
      parameters:
        - in: query
          name: teamId
          description: id of team
          required: true
          schema:
            type: integer
        - in: query
          name: userId
          description: id of user
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successfully deleted team member
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserTeamSchema"
        "401":
          description: Missing authentication
        "403":
          description: Not authorized
        "404":
          description: Not found
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  schemas:
    UserSignupBody:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: testUser
        email:
          type: string
          example: test@user.com
        password:
          type: string
          example: geheimesPasswort
    UserSchema:
      type: object
      required:
        - id
        - username
        - email
        - isAdmin
        - createdAt
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "testUser"
        email:
          type: string
          example: "test@user.com"
        isAdmin:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: "2021-07-21T17:32:28Z"
    CreateGroupSchema:
      type: object
      properties:
        name:
          type: string
          example: "NewGroup"
        password:
          type: string
          example: "geheimesPasswort"
    GroupSchema:
      type: object
      required:
        - id
        - name
        - createdAt
        - invitationCode
        - colorCode
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "NewGroup"
        createdAt:
          type: string
          format: date-time
          example: "2021-07-21T17:32:28Z"
        invitationCode:
          type: string
          example: "eL2dE9"
        colorCode:
          type: string
          example: "AD3C43"
    CreateAppointmentSchema:
      type: object
      required:
        - groupId
        - title
        - startDate
        - startTime
        - endTime
        - colorCode
      properties:
        groupId:
          type: integer
          example: 1
        title:
          type: string
          example: "Projektmeeting"
        startDate:
          type: string
          format: date
          example: "2021-12-15"
        startTime:
          type: string
          format: time
          example: "12:00:00"
        endTime:
          type: string
          format: time
          example: "13:30:00"
        colorCode:
          type: string
          example: "FF21CA"
        description:
          type: string
          example: "Ein sehr wichtiges Projektmeeting"
        repeatInterval:
          type: integer
          example: 7
        maxOccurences:
          type: integer
          example: 4
        parentId:
          type: integer
    AppointmentSchema:
      type: object
      required:
        - id
        - groupId
        - title
        - startDate
        - startTime
        - endTime
        - colorCode
        - members
        - exceptions
      properties:
        id:
          type: integer
          example: 1
        groupId:
          type: integer
          example: 1
        title:
          type: string
          example: "Projektmeeting"
        startDate:
          type: string
          format: date
          example: "2021-12-15"
        startTime:
          type: string
          format: time
          example: "12:00:00"
        endTime:
          type: string
          format: time
          example: "13:30:00"
        colorCode:
          type: string
          example: "FF21CA"
        description:
          type: string
          example: "Ein sehr wichtiges Projektmeeting"
        repeatInterval:
          type: integer
          example: 7
        maxOccurences:
          type: integer
          example: 4
        parentId:
          type: integer
          example: 1
        members:
          type: array
          items:
            $ref: "#/components/schemas/AppointmentMemberSchema"
        exceptions:
          type: array
          items:
            $ref: "#/components/schemas/AppointmentExceptionSchema"
        files:
          type: array
          items:
            $ref: "#/components/schemas/AppointmentFileSchema"
    EditAppointmentSchema:
      type: object
      properties:
        groupId:
          type: integer
          example: 1
        title:
          type: string
          example: "Projektmeeting"
        startDate:
          type: string
          format: date
          example: "2021-12-15"
        startTime:
          type: string
          format: time
          example: "12:00:00"
        endTime:
          type: string
          format: time
          example: "13:30:00"
        colorCode:
          type: string
          example: "FF21CA"
        description:
          type: string
          example: "Ein sehr wichtiges Projektmeeting"
        repeatInterval:
          type: integer
          example: 7
        parentId:
          type: integer
        maxOccurences:
          type: integer
          example: 4
    TeamSchema:
      type: object
      properties:
        groupId:
          type: integer
          example: 123456
        name:
          type: string
          example: "Team 1"
        color:
          type: string
          example: "B3B3B3"
    UserTeamSchema:
      type: object
      required:
        - id
        - userId
        - teamId
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        teamId:
          type: integer
          example: 1
    AppointmentMemberSchema:
      type: object
      required:
        - id
        - username
        - email
        - isAdmin
        - acceptedInvitation
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: testUser
        email:
          type: string
          example: test@user.com
        isAdmin:
          type: boolean
          example: false
        acceptedInvitation:
          type: boolean
          example: true
    GroupIdSchema:
      type: object
      required:
        - groupId
      properties:
        groupId:
          type: integer
          example: 1
    TeamIdSchema:
      type: object
      required:
        - teamId
      properties:
        teamId:
          type: integer
          example: 1
    CreateAppointmentExceptionSchema:
      type: object
      required:
        - appointmentId
        - date
      properties:
        appointmentId:
          type: integer
          example: 1
        date:
          type: string
          format: date
          example: "2021-12-15"
    AppointmentExceptionSchema:
      type: object
      required:
        - id
        - date
      properties:
        id:
          type: integer
          example: 1
        date:
          type: string
          format: date
          example: "2021-12-15"
    AppointmentFileSchema:
      type: object
      required:
        - id
        - url
      properties:
        id:
          type: integer
          example: 1
        url:
          type: string
          format: url
          example: "https://picsum.photos/200/300"
